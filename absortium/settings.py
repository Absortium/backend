"""
Django settings for absortium project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from datetime import timedelta

from kombu import Exchange, Queue

from core.utils.general import load_environments, get_attr_from_module

load_environments(__name__, [
    ('SECRET_KEY', 'DJANGO_SECRET_KEY', True),
    ('POSTGRES_PASSWORD', 'POSTGRES_PASSWORD', True),
    ('WHOAMI', 'WHOAMI'),
    ('MODE', 'MODE'),
    ('AUTH0_SECRET_KEY', 'AUTH0_SECRET_KEY'),
    ('AUTH0_API_KEY', 'AUTH0_API_KEY'),
    ('ETH_NOTIFICATION_TOKEN', 'ETH_NOTIFICATION_TOKEN'),
    ('BTC_NOTIFICATION_TOKEN', 'BTC_NOTIFICATION_TOKEN'),
    ('COINBASE_API_KEY', 'COINBASE_API_KEY'),
    ('COINBASE_API_SECRET', 'COINBASE_API_SECRET'),
    ('ETHWALLET_API_KEY', 'ETHWALLET_API_KEY'),
    ('ETHWALLET_API_SECRET', 'ETHWALLET_API_SECRET')
])

COINBASE_SANDBOX = get_attr_from_module(__name__, 'MODE') in ['testnet']
if COINBASE_SANDBOX:
    COINBASE_API_URL = 'https://api.sandbox.coinbase.com'
else:
    COINBASE_API_URL = 'https://api.coinbase.com'

COINBASE_ACCOUNT_ID = '2bbf394c-193b-5b2a-9155-3b4732659ede'

CELERY_BROKER = 'amqp://guest@docker.celery.broker//'
CELERY_RESULT_BACKEND = 'redis://docker.celery.backend'

ROUTER_URL = "http://docker.router:8080/publish"
ETHWALLET_URL = "http://docker.ethwallet:3000/"

CELERY_DEFAULT_QUEUE = 'absortium'
CELERY_QUEUES = (
    Queue('absortium', Exchange('absortium'), routing_key='absortium'),
)

MODE = get_attr_from_module(__name__, 'MODE')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = MODE not in ["testnet", "realnet"]

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django_extensions',
    'rest_framework',
    'absortium',
    'absortium.celery',
    'core.apikeyauth'

]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'core.apikeyauth.authentication.APIKeyAuth'
    )
}

ROOT_URLCONF = 'absortium.urls'

JWT_AUTH = {
    'JWT_DECODE_HANDLER': 'absortium.jwt.jwt_decode_handler',
    'JWT_PAYLOAD_GET_USERNAME_HANDLER': 'absortium.jwt.jwt_get_username_from_payload',
    'JWT_AUDIENCE': get_attr_from_module(__name__, 'AUTH0_API_KEY'),
    'JWT_SECRET_KEY': get_attr_from_module(__name__, 'AUTH0_SECRET_KEY'),
}

CELERYBEAT_SCHEDULE = {
    'calculate-market-info-every-20-seconds': {
        'task': 'absortium.celery.tasks.calculate_market_info',
        'schedule': timedelta(seconds=20)
    },
    'pregenerate-accounts-every-20-seconds': {
        'task': 'absortium.celery.tasks.pregenerate_accounts',
        'schedule': timedelta(seconds=20)
    },
}

WSGI_APPLICATION = 'wsgi.application'

# Very dirty hack for forcing celery to connect to the test_postgres db while integration test.
NEED_TEST_DB = MODE in ['integration']
dbname = 'test_postgres' if NEED_TEST_DB else 'postgres'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': dbname,
        'USER': 'postgres',
        'PASSWORD': get_attr_from_module(__name__, 'POSTGRES_PASSWORD'),
        'HOST': 'docker.postgres',
        'PORT': '5432',
        'CONN_MAX_AGE': 500
    }
}

SILENCED_SYSTEM_CHECKS = ["models.W001"]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True
